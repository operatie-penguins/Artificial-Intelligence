//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "Main.h"
#include "GameTypes.h"
#include <list>
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"

//дефайны для работы с СИМПРом
#define USERMESSAGE "MyMessage"
#define YES     1
#define NO      0

#define CONDITIONS      0
#define ACTIONS         1

#define DEBUG 0

UINT OurMessage;

std::list<Visitor> Visitors;    //список посетителей
UINT VisitorsTurned = 0;            //количество сходивших посетителей
bool AllVisitorsTurned = false; //все посетители сходили
UINT CurrentVisitor;            //номер текущего посетителя
bool TryToCreateVisitor = false;        //была попытка создать посетителя?


TMainForm *MainForm;

//---------------------------------------------------------------------------
__fastcall TMainForm::TMainForm(TComponent* Owner)
        : TForm(Owner)
{
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::FormCreate(TObject *Sender)
{
        OurMessage = RegisterWindowMessage(USERMESSAGE);
        Randomize();
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::WndProc(Messages::TMessage &Message)
{
        if(Message.Msg == OurMessage)
                Message.Result = MainGameProc(Message.WParamHi,Message.WParamLo,Message.LParam);
        else
                TCustomForm::WndProc(Message);
}
//---------------------------------------------------------------------------
int TMainForm::MainGameProc(Word WParamHi, Word WParamLo, int LParam)
{
        Application->ProcessMessages();
        Sleep(100);
        //AnsiString mes = "VisitorsTurned = " + IntToStr(VisitorsTurned);
        //MessageBox(MainForm->Handle,mes.c_str(),"111",16);
        switch(WParamHi)
        {
        //правила
        case CONDITIONS:
                {
                        switch(WParamLo)
                        {
                        //таблица 1
                        case 1:
                                {
                                        if (DEBUG) MessageBox(MainForm->Handle,"Условия->Таблица1","BeerStorm Debug",16);

                                        switch(LParam)
                                        {
                                        //Пробовали создать посетителя?
                                        case 1:
                                                {
                                                        return TryToCreateVisitor;
                                                }
                                        //Посетители есть?
                                        case 2:
                                                {
                                                        if (Visitors.size() > 0)
                                                                return YES;
                                                        return NO;
                                                }
                                        //Посетители ходили?
                                        case 3:
                                                {
                                                        bool NotTurnYet = false;

                                                        std::list<Visitor>::iterator it;
                                                        for (it = Visitors.begin(); it != Visitors.end(); it++)
                                                        {
                                                                if (it->AlreadyTurn == false)
                                                                        NotTurnYet = true;
                                                        }

                                                        if (DEBUG)
                                                                if (NotTurnYet)
                                                                        MessageBox(MainForm->Handle,"Не все посетители сходили!","BeerStorm Debug",16);
                                                                        
                                                        return NotTurnYet;
                                                }
                                        //Бармен ходил?
                                        case 4:
                                                {
                                                        return NO;
                                                }
                                        //Свободные дорожки есть?
                                        case 5:
                                                {
                                                        if (Visitors.size() < 3)
                                                                return YES;
                                                                
                                                        return NO;
                                                }
                                        }
                                        break;
                                }
                        //таблица 2
                        case 2:
                                {
                                        if (DEBUG) MessageBox(MainForm->Handle,"Условия->Таблица2","BeerStorm Debug",16);

                                        switch(LParam)
                                        {
                                        //Есть в руках пиво?
                                        case 1:
                                                {
                                                        return NO;
                                                }
                                        //Посетитель пьёт?
                                        case 2:
                                                {
                                                        return NO;
                                                }
                                        //Есть ещё посетители, которые не ходили?
                                        case 3:
                                                {
                                                        UINT VisNotTurn = 0;

                                                        std::list<Visitor>::iterator it;
                                                        for (it = Visitors.begin(); it != Visitors.end(); it++)
                                                                if (it->AlreadyTurn == false)
                                                                        VisNotTurn++;

                                                        if (VisNotTurn > 1)
                                                                return YES;
                                                        
                                                        if (VisNotTurn == 1)
                                                        {
                                                                it = Visitors.begin();
                                                                it->AlreadyTurn = true;
                                                        }
                                                        
                                                        return NO;
                                                }
                                        }
                                        
                                        return false;
                                }
                        }

                        break;
                }
        //действия
        case ACTIONS:
                {
                        switch(WParamLo)
                        {
                        //таблица 1
                        case 1:
                                {
                                        switch(LParam)
                                        {
                                        //Попытаться создать посетителя
                                        case 1:
                                                {
                                                        if (DEBUG) MessageBox(MainForm->Handle,"Создаём посетителя!","111",16);

                                                        TryToCreateVisitor = true;

                                                        bool table1,
                                                             table2,
                                                             table3;

                                                        table1 =
                                                        table2 =
                                                        table3 = false;

                                                        std::list<Visitor>::iterator it;

                                                        for (it = Visitors.begin(); it != Visitors.end(); it++)
                                                        {
                                                                if (it->TableNum == 1) table1 = true;
                                                                if (it->TableNum == 2) table2 = true;
                                                                if (it->TableNum == 3) table3 = true;
                                                        }

                                                        if (!table1)
                                                        {
                                                                Visitors.insert(Visitors.end(),*CreateNewVisitor(1));
                                                                //VisitorsTurned++;
                                                                return YES;
                                                        }
                                                        if (!table2)
                                                        {
                                                                Visitors.insert(Visitors.end(),*CreateNewVisitor(2));
                                                                //VisitorsTurned++;
                                                                return YES;
                                                        }
                                                        if (!table3)
                                                        {
                                                                Visitors.insert(Visitors.end(),*CreateNewVisitor(3));
                                                                //VisitorsTurned++;
                                                                return YES;
                                                        }
                                                        break;
                                                }
                                        //Обнулить флаги ходов
                                        case 2:
                                                {
                                                        TryToCreateVisitor = false;

                                                        std::list<Visitor>::iterator it;
                                                        for (it = Visitors.begin(); it != Visitors.end(); it++)
                                                                it->AlreadyTurn = false;
                                                        break;
                                                }
                                        //Установить флаг попытки создания посетителя
                                        case 3:
                                                {
                                                        TryToCreateVisitor = true;
                                                        break;
                                                }
                                        }
                                        return YES;
                                }
                        //таблица 2
                        case 2:
                                {
                                        switch(LParam)
                                        {
                                        //Сделать шаг вперёд
                                        case 1:
                                                {
                                                        std::list<Visitor>::iterator it;
                                                        for (it = Visitors.begin(); it != Visitors.end(); it++)
                                                        {
                                                                if (it->AlreadyTurn == false)
                                                                {
                                                                        it->Position++;
                                                                        it->AlreadyTurn = true; //////!!!!!!!!!!!!!!!!!!!!!!!
                                                                        if (DEBUG) MessageBox(MainForm->Handle,"Двигаем посетителя!","BeerStorm Debug",16);
                                                                        return YES;
                                                                }
                                                        }
                                                        break;
                                                }
                                        //Перейти к следующему посетителю
                                        case 2:
                                                {
                                                        /*std::list<Visitor>::iterator it;
                                                        for (it = Visitors.begin(); it != Visitors.end(); it++)
                                                        {
                                                                if (it->AlreadyTurn == false)
                                                                {
                                                                        MessageBox(MainForm->Handle,"Переходим к следующему посетителю!","BeerStorm Debug",16);
                                                                        it->AlreadyTurn = true;
                                                                        break;
                                                                }
                                                        }*/
                                                        break;
                                                }
                                        }
                                        return YES;
                                }
                        }
                        break;
                }
        }
        
        return 0;
}
//---------------------------------------------------------------------------
void TMainForm::DrawGameObjects()
{
        std::list<Visitor>::iterator it;

        for (it = Visitors.begin(); it != Visitors.end(); it++)
        {
                GameImages->Draw(MainForm->Canvas,8+49*it->Position,57*(it->TableNum*2-1),0,true);
        }
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::PlayButtonClick(TObject *Sender)
{
        GameImages->Draw(MainForm->Canvas,8,57,0,true);
        GameImages->Draw(MainForm->Canvas,8,171,0,true);
        GameImages->Draw(MainForm->Canvas,8,285,0,true);
}
//---------------------------------------------------------------------------





void __fastcall TMainForm::Timer1Timer(TObject *Sender)
{
DrawGameObjects();        
}
//---------------------------------------------------------------------------

